################################################################################################
######## istruzioni avanzate: superficie di verosimiglianza al variare dello spazio dei parametri
################################################################################################

alpha<- rep(seq(-.1,.1,length=100), each=100)
beta<- rep(seq(.8,1.13,length=100), times=100)

devstds <- coef(esempio)[3]*91/90
alpha_beta <- cbind(alpha, beta)

loglik <-function(param, devstd) sum(dnorm(y-(param[1]+param[2]*x), mean=0, sd=devstds, log = TRUE))

logliks <- NULL
for( i in 1:10000){
  logliks <- rbind(logliks, loglik(param=c(alpha_beta[i,]), devstd=devstds))
}

#### utilizzo del comando apply
#### logliks <- apply(alpha_beta, MARGIN=1, loglik, devstd=devstds)

sup <- matrix(logliks, 100,100, byrow=T)
persp(unique(alpha), unique(beta),sup,
      theta = 30, phi = 30, expand = 0.5,
      col = "lightblue",ticktype="detailed",
      xlab="alpha",ylab="beta",zlab="norm_lik", main="verosimiglianza")

image(unique(alpha), unique(beta),sup,, 
      col=rainbow(50),xlab="alpha", ylab="beta",main="contour verosimiglianza")
contour(unique(alpha), unique(beta),sup,
        nlevels=75,xlab="alpha", ylab="beta", add=T)


# distribuzione (simulata) stimatori dei parametri del modello y=a+b*x
modello <- function(i, a,b, sigma){
  a1 <- a
  b1 <- b
  x <- seq(1,10,.1)/10
  eps <- rnorm(length(x), mean=0, sd=sigma)
  y <- a1+ b1*x+ eps
  regr <- lm(y~x)
  c(coef(regr), deviance(regr))
}
param <- as.data.frame(t(sapply(1:1000, modello, a=0, b=1, sigma=.1)))
names(param) <- c("alpha", "beta", "dev res")

pairs(param)

######## superficie di perdita con regressione robusta (median sum of abs residuals) TO BE COMPLETED
a1 <- 0
b1 <- 1
x <- seq(1,10,.1)/10
eps <- rnorm(length(x), mean=0, sd=sigma)
y <- a1+ b1*x+ eps

subset_anom <- floor(length(x)*.95):length(x) # 5% di valori anomali !!!
y[subset_anom] <-  a1+ b1*x[subset_anom]+ abs(eps[subset_anom])*10 


alpha<- rep(seq(-.1,.1,length=100), each=100)
beta<- rep(seq(.8,1.13,length=100), times=100)
parametri <- cbind(alpha, beta)


funz_obj <- function(i, param) sum(abs(y-(param[i,1]+param[i,2]*x)))
logliks <- sapply(1:10000, FUN = funz_obj, param=parametri)

sup <- matrix(logliks, 100,100, byrow=T)
library(rgl)
persp3d(unique(alpha), unique(beta),sup,zlim=c(10,13),
      theta = 30, phi = 30, expand = 0.5,
      col = "lightblue",ticktype="detailed",
      xlab="alpha",ylab="beta",zlab="norm_lik", main="verosimiglianza")
image(unique(alpha), unique(beta),sup, 
      col=rainbow(50),xlab="alpha", ylab="beta",main="contour verosimiglianza")
contour(unique(alpha), unique(beta),sup,
        nlevels=25,xlab="alpha", ylab="beta", add=T)

plot(y~x)
abline(lm(y~x))
plot(lm(y~x))
lm(y~x)
