########################################
########### verosimiglianza ############

par(mfrow=c(1,1))

###############################################
# verosim bernoulli
from_bern <- rbinom(100, size = 1, prob = .3)
summary(from_bern)

loglik <- function(p, y ) sum(y*log(p)+(1-y)*log(1-p))
probs <- seq(0.001, .999, by=0.001)
verosim <- sapply(probs, loglik, y=from_bern )

#verosim 
plot(probs, verosim, pch=16, cex=.1)

#verosim normalizzata
plot(probs, exp(verosim-max(verosim)), type="l", 
     pch=16, cex=.1, main="verosimiglianza normalizzata")

# interv di max verosim
alpha <- 0.05 
estremi <- c(min(probs[exp(verosim-max(verosim)) >alpha]) , 
             max(probs[exp(verosim-max(verosim)) >alpha]))
liv_conf <- rep(alpha,2)
lines(estremi, liv_conf, type="h")


# se il campione raddopppia
from_bern <- rep(from_bern, times = 2)
verosim <- sapply(probs, loglik, y=from_bern )
lines(probs, exp(verosim-max(verosim)), pch=16, cex=.1, col="red")

legend("topright", legend = c("n", "2*n"), 
       col=c("black", "red"), lty=c(1,2))

# interv di max verosim
alpha <- 0.05 
estremi <- c(min(probs[exp(verosim-max(verosim)) >alpha]) , 
             max(probs[exp(verosim-max(verosim)) >alpha]))
liv_conf <- rep(alpha,2)
lines(estremi, liv_conf, type="h", col="red")


#######################
# stima MLE con MASS
library(MASS)
?fitdistr
fitting <- fitdistr(from_bern, dbinom, list(prob = 0.5),size=1,  lower = 0.0001, upper = .99999)
fitting
confint(fitting)

#######################
# stima MLE con stats4
library(stats4)
?mle
loglik <- function(prob) -sum(stats:: dbinom(x = from_bern, size = 1, prob, log = T))
mle(loglik, start=list(prob=.5),  method = "Brent", lower = 0, upper = 1)

confint(mle(loglik, start=list(prob=.5)))


###############################################
# verosim media gaussiana (sigma noto)
from_norm <- rnorm(100,mean = 4, sd = 2)
summary(from_norm)

loglik <- function(mean) sum(stats::dnorm(x = from_norm, mean, sd=2, log = T))
medie <- seq(2,6, by=0.01)
verosim <- sapply(medie, loglik )

#verosim 
plot(medie, verosim, pch=16, cex=.1)

#verosim normalizzata
plot(medie, exp(verosim-max(verosim)), 
     pch=16, cex=.1, type="l", main="verosim normalizzata")

# stima MLE con MASS
library(MASS)
stima <- fitdistr(from_norm, densfun = "normal", sd=1) ### !!!
stima$estimate
stima$vcov
confint(stima)

# stima MLE con stats4
library(stats4)
loglik <- function(mean) -sum(stats::dnorm(x = from_norm, mean, sd=2, log = T))
confint(mle(loglik, start=list(mean=3)))


###############################################
# distribuzione (simulata) stimatore pi.greco bernoulli
# stima MLE con stats4
library(stats4)

stimaML <- function(i,n, prob) {
  loglik <- function(prob1) -sum(stats::dbinom(x , size = 1, prob=prob1, log = T))
  x <- rbinom(n, size = 1, prob = prob)
  mle(loglik, start=list(prob1=.5), method = "Brent", lower = 0, upper = 1)@coef
}

system.time(
  vettore_pi <- sapply(1:1000, stimaML, n=100, prob=.3)
)

hist(vettore_pi, freq=F, 
     xlab="p", main="distribuzione di p Be(p)")
curve(dnorm(x, mean = mean(vettore_pi), sd = sd(vettore_pi)),
      from=0, to=1, add=T, col="red")
quantile(vettore_pi, probs=c(.025,.975))

#######################################################
# distribuzione asintotica del rapporto di verisimiglianza
# -2logL -> chi_quadro(gdl=1)
library(MASS)

loglik <- function(i,n,p_vero, p_H0) {
  y <- rbinom(n, size = 1, prob = p_vero)
  loglik_H0 <- sum(y*log(p_H0)+(1-y)*log(1-p_H0))
  fitting <- fitdistr(y, dbinom, list(prob = 0.5),size=1,  lower = 0.0001, upper = .99999)
  c(loglik_H0, unlist(fitting))
}

#test H0=p_vero : si ha la distribuzione chisq(1)
#test H0<>p_vero : si ha la distribuzione  chisq(1) noncentrale
repl <- 10000
n=500
p_vero=.5
p_H0=.4
verosim <- sapply(1:repl, loglik , n=n, p_vero=p_vero, p_H0=p_H0, simplify = T)
rownames(verosim)[1] <- "loglik_H0"
verosim <- t(as.matrix(verosim))

#v.c. di wilks
distrib_rapp_verosim <- -2*(verosim[,1]-verosim[,5])

hist(distrib_rapp_verosim, freq=F, nclass=50)
curve(dchisq(x,df = 1), from=0.1, to=25, add=T, col="red")

# soglia critica al 95%
lim_sup <- qchisq(p = .95,df = 1)
abline(v=lim_sup, col="green")
#p-value
pvalue <- sum(distrib_rapp_verosim<=lim_sup)/repl
paste("p-value: ", pvalue)
ifelse(pvalue >.05,("accetto H0"),  ("rifiuto H0"))

############################
# distribuzione (simulata) stimatore lambda Poisson
stimaML <- function(i,n, lambda) {
    loglik <- function(lambda1) -sum(stats::dpois(x ,lambda =  lambda1, log = T))
  x <- rpois(n, lambda = lambda)
  mle(loglik, start=list(lambda1=1), method = "Brent", lower = 0, upper=1e+10)@coef
}
vettore_lambda <- sapply(1:1000, stimaML, n=100, lambda=2)

hist(vettore_lambda , freq=F, 
     xlab=expression(lambda), 
     main=expression(paste("distribuzione di ", lambda, " Pois(",lambda,")")))
curve(dnorm(x, mean = mean(vettore_lambda), sd = sd(vettore_lambda)),
      from=min(vettore_lambda), to=max(vettore_lambda), add=T, col="red")

quantile(vettore_lambda , probs=c(.025,.975))


##############################################
# verosim  lognormal
##############################################

from_lnorm <- rlnorm(100,meanlog = 1, sdlog = 1)
summary(from_lnorm)

loglik <- function(param) sum(stats::dlnorm(x = from_lnorm, 
                              meanlog = param[1],sdlog = param[2], log = T))
medie <- seq(0,2, length.out = 201)
devstds <- seq(0.5,2, length.out = 201)

param_space <- cbind(rep(medie, 201), rep(devstds, each=201))

verosim <- apply(param_space,MARGIN = 1,  loglik )


#verosim 
sup <- matrix(verosim, 201,201, byrow=T)
persp(medie, devstds,sup, zlim=c(min(sup), max(sup)),
      theta = 30, phi = 30, expand = 0.5,
      col = "lightblue",ticktype="detailed",
      xlab="media",ylab="devstd",zlab="log_lik", main="verosimiglianza")

image(medie, devstds,sup, 
      col=rainbow(50),xlab="media", ylab="devstd",main="contour verosimiglianza")
contour(medie, devstds,sup, nlevels=75, add=T)



